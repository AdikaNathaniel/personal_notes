 The difference between C#  And .NET
1.C# is a programming language whereas .Net is a framework for building different applications using languages of F# and C#.
(Like Django for Python)
(Like Spring,Hibernate and Springboot for Java)
(Like Laravel for PHP)
2.".NET" consists of a class library and a Common Language Runtime(does a conversion to machine instructions that your device can understand).
3.C# came in 2001 to combine C++ and Visual Basic advantages.
4.C# supports procedural and object oriented programming.
5.C# is a statically typed language meaning the type of variables is defined at compile time.(Hence,compiled language).
Dynamically typed languages is at Runtime(Hence,interpretated language).Eg is python.
6.C# is supported by Microsoft.
.NET 8 was released in 2023.
For 3D games,Unity is used.
For machine learning,python is used.
Console applications interact with a user via the console or terminal.
7.C# is used for web applications,cloud applications,desktop applications,games,AI-powered languages and mobile
applications and Windows Services.
Applications of C# are developed on .NET.
.Net 6 is cross platform in that applications created with it can run on Windows,Linux
and Mac.
Aside C#,dotnet supports F# and Visual Basic.
C# is grouped into C# 10 and C# 11 working togethere with .Net6 and .Net7.
C# is the general name however,C# 10 and .Net 6 were released in 2021 with # 11 and .Net 7 releaed in 2022.
Hence,C# 10 sought to improve the simplicity of code with ,C# 11 making further improvements to C# 10. 
8.C# however is the main language for .Net development.
C# is type-safe meaning that on compilation,the compiler checks that all data types are
properly used otherwise,an error will be flaged.
9.C# is familiar to C,C++,Java and JS.
10.C# 1.0..............2002
C# 1.1..............2003
C# 2.0..............2005
C# 3.0..............2007
C# 4.0..............2010
C# 5.0..............2012
C# 6.0..............2015
C# 7.0..............2017
C# 8.0..............2019
C# 9.0..............2020
C# 10.0..............2021
Compiling C# 1.0 today,it'll still compile.
Visual Studio 2022 won't work on Linux but Vscode will.
Visual Studio 2022(Community,Professional and Enterprise Edition) is the flagship IDE.
*Intellisense
*IntelliQuote..........Other quotation that comes up when you type one.
                                            PROGRAMMING NOTES
1.Strings work with " ".
2.Build is checking for errors in  the application hence compiling it without running it.
3.Console.WriteLine("Please Enter Your Name");
string name = Console.ReadLine();
Console.WriteLine("Hello " +name);
4.The generated files are:
(a)Project
(b)Solution................A grouping of all available projects
(c)Executable file
*The sln file contains references that a project contains.
5.To manually run this console app,
-Open Project folder
-Open  Bin->Debug->net8.0 folders
-Type "cmd" in the address bar
-Type the ".exe" say "AdikaPractice.exe"
6.Debugging is investigating code for errors hence identifying breakpoints. 
When a breakpoint is reached,debugger comes in allow a dev to check for errors.
7.Compilation happens before execution.
8.A breakpoint can be introduced in code via Visual Studio where at that particulat breakpoint,
only the code above the breakpoint runs.
-Click continue to get the application running as normal.
*Use the "step over" to get code to run line by line after introducing a breakpoint.
SDK consists of CLI and libraries.
9.Creating A CSharp application for console,
-dotnet new console -n "First Program"........Create a new console app with name "First Program"
Others:
-dotnet build................This is to compile an application
-dotnet run
For a CLI app,dotnet run will do however for a web app,dotnet watch will do.
10.Using C# Dev Kit which was intended to give Visual Studio experience in VsCode,
-Ctrl + Shift + P for the Command Palette
-.NET Project
-Console App
-Give a name and select a location
-Create Project
Beneath is a Solution Explorer from which program.cs and  other project files can be obtained.
Right Click on the folder app name you gave to build the project.
11.CSharp Documentation on Microsoft Docs is a good way to learn C#.
12.C# Statements:
(a)Always end with semi-colon like:
Console.WriteLine("Hello");
(b)Whitespaces do not matter. 
13.Identifiers like name
(a)Identifiers must start with a letter or an underscore.It can't start with a number.
14.Comments are given as "//" or "/*  */".......Single-line and Multi-line comments
15.C# Keywords:
(a)int         
(b)in
(c)class
(d)using
(e)while
(f)new
(g)null
(h)if
(g)else
(i)case
(j)ref
(h)return
(k)lock
(l)long
(m)string
(n)struct
(i)enum
(j)const.........for immutable values
const decimal age = 0.07;
(h)void
16.Variables can be integer,string or dates.
-int age;..........type and identifier
age = 25;
Console.WriteLine(age):
-CamelCase is usually used like firstName
17.string lastName = Console.ReadLine();
This is to take user input.
18.C# is a strongly typed language in that every variable must have a type.
19.DataTypes in C# are:
(a)Predefined Types
-bool
-int(int32 for 4 bytes)
-float
-double
-decimal
-char
-byte............Takes values between 0 and 255
-short
-object
-string 
(b)User-defined Types
Data Types ensure type safety in that:
int c = 3;
c= true;............This will lead the code to break.
int months = 12, bonus =100;............Notice both are of the same type.
byte numberOfEmployees = 124;
string(" ") is a collection of char(' ').
string nat = string.Empty; IS SAME AS  string nat = " ";
20.C# Operators:
-Arithmetic Operators
int month =3;
month = month +1;
month +=1;
-Equality Operators
-Logical Operators
-Assignment Operators
21.Default values are false for bool and 0 for int.
int nait = int.MaxValue;
int nati = int.MinValue;

char myChar = 'a';
bool isWhiteSpace = char.IsWhiteSpace(myChar);
bool isDigit = char.IsDigit(myChar);
bool isPunctuation = char.IsDigit(myChar);

char userSelection = 'a';
char upperVersion = char.ToUpper(userSelection);

bool isDigit  = char.IsDigit(userSelection);
bool isLetter  = char.IsLetter(userSelection);
22.DateTime and TimeSpan are  used for Date And Time.

DateTime employeeStart = new DateTime(2023,03,12);
Console.WriteLine(employeeStart);
DateTime  today = DateTime.Today;
Console.WriteLine(today);

DayOfWeek day = someDateTime.DayOfWeek;
Console.WriteLine(day);
DayOfWeek twoDaysLater = someDateTime.AddDays(2);
Console.WriteLine(twoDaysLater);
bool isDST = someDateTime.IsDaylightSavingTime();
Console.WriteLine(isDST);
                                //Year,Month,Day,Hours,Minutes,Seconds
*DateTime employeeStart = new DateTime(2023,03,12,14,30,0);
Output is : 3/12/2023 2:30:00 PM


DateTime exitDate = new DateTime(2025,02,9);
Console.WriteLine(exitDate);
2/9/2025 12:00:00 AM

DateTime exitDates =  exitDate.AddDays(1);
Console.WriteLine(exitDates);
2/10/2025 12:00:00 AM

DateTime currentDate =  DateTime.Now;
Console.WriteLine(currentDate);
This gives the immediate Date and Time.

bool areIn =  currentDate.IsDaylightSavingTime();
Console.WriteLine(areIn);
This gives whether or not it is day or not.

Console.WriteLine(startHour.ToLongDateString());
*Wednesday, October 9, 2024
Console.WriteLine(endHour.ToShortTimeString());
*3:53 AM

Changing Between Types
(a)Implicit Conversion
int a =123456789
long l = a;
//A smaller data type fitting into a larger datatype.
//A long cannot be put in an int.This is where explicit casting comes in. 
(b)Explicit Conversion....Casting
double d = 123456789.980;
int a = (int) d;
(c)Helpers
Implicit Typing is causing the compiler to determine the data type on it's own.
Eg 
  var a = 123;
  var b = true;
  var c = 11.0;
C# looks at the values on the right and decides the type.
For developers,this makes code less readable.
Explicit Typing involves using the exact datatype.
int a = 123;
bool b = true;
double d = 11.0;
23.C# is a strongly typed language.
24.Decisions consist of "if" or "switch" and Iterations consist of  "while","for".
25.Relational Operators are:
(a) ==
(b) !=
(c) > or <
(d) >= or <=
26.Logical Operators:
- &&
- ||
27.
int age = 23;
bool a = age == 23;
Console.WriteLine( "Age is 23" +a);
//This gives true.

int age = 23;
bool b = age > 23;
Console.WriteLine( "Age is 23" +a);
//This gives false.
28.
bool  c = (age >= 18) &&  (age <= 65);
Console.WriteLine("Age is between 18 and 65" +c);
Result is true.
29.
if(condition).................This always works with a condition.
else if(condition)
{
}
else
{
}
30.
Console.WriteLine("Enter Age Of The Candidate");
int aged = int.Parse(Console.ReadLine());
//This ensures that input received is converted to integer.
31.Switch Statements
switch(expression)
{
   case constant expression 1
   break;
    
   case relational expression 2
   break;
   
  default:
  break;
}
Eg 1
var age = 19;

switch(age)
{
   case < 18:
     Console.WriteLine("Young");
   case > 26:
     Console.WriteLine("Old");
   case 23:
     Console.WriteLine("Old");
   default:
     Console.WriteLine("Perfect Age");
   break;
}

var age = 19;

switch(age)
{
   case < 18:                            //If either of these is true,run this.
   case > 86:
     Console.WriteLine("Young");
   break;
   case > 26:
     Console.WriteLine("Old");
    break;
   case 23:
     Console.WriteLine("Old");
    break;
   default:
     Console.WriteLine("Perfect Age");
   break;
}

In relation to if statements,
var age = 19;

if(age < 18)
{
   Console.WriteLine("Young");
}
else if(age > 26)
{
   Console.WriteLine("Old");
}
else
{
  Console.WriteLine("Perfect Age");
}

-Switch does not work for double and float.
-Switch works for constant expressions and relational expressions.
Eg 2
Console.WriteLine("Choose the action you want to do");
Console.WriteLine("1.Add employee");
Console.WriteLine("2.Update employee");
Console.WriteLine("3.Delete employee");
string selected = Console.ReadLine();

switch(selected)
{                           //If either of these is true,run this.
   case "1":
     Console.WriteLine("Adding employee");
    break;
   case "2":
     Console.WriteLine("Updating employee");
     break;
   case "3":
     Console.WriteLine("Deleting employee");
    break;
   default:
     Console.WriteLine("Invalid Input");
   break;   
}
This technology is deployed in SMS.
32.Iterations are while,do while and for loop and foreach loop.
1.while(boolean condition expression)
{
   //statement
}
Eg 1:
int i = 0;
while(i < 10)
{
 Console.WriteLine(i);
 i++;
}
Eg 2:
Console.WriteLine("Enter A Value");
int max = int.Parse(Console.ReadLine());
int i = 0;

while(i < max)
{
  Console.WriteLine(i);
  i++;                           //Or i--;
}
Console.WriteLine("Loop finished");
Integrating while statements with switch statements,
Console.WriteLine("Choose the action you want to do:");
Console.WriteLine("1. Add employee");
Console.WriteLine("2. Update employee");
Console.WriteLine("3. Delete employee");
Console.WriteLine("99. Exiting Application");

string selectd = Console.ReadLine();

while (selectd != "99")
{
    switch (selectd)
    {
        case "1":
            Console.WriteLine("Adding employee");
            break;
        case "2":
            Console.WriteLine("Updating employee");
            break;
        case "3":
            Console.WriteLine("Deleting employee");
            break;
        default:
            Console.WriteLine("Invalid Input");
            break;
    }

    Console.WriteLine("\nChoose the action you want to do:");
    Console.WriteLine("1. Add employee");
    Console.WriteLine("2. Update employee");
    Console.WriteLine("3. Delete employee");
    Console.WriteLine("99. Exiting Application");

    selectd = Console.ReadLine();
}

Console.WriteLine("Closing App");
33.Nested While Loops
int i =0;
int j =0;

while(i <10)
{
   while(j <10)
{
   Console.WriteLine("i:" +i + "j:" +j);
   j++;
}
  j=0;
  i++;
}
34.do{
 //statements
}
while(boolean conditional statement)
Eg:
int i=10;

do{
  Console.WriteLine("Value of i is " +i);
  i++;
}while(i<10);
An output of 10 is generated due to the do statement present.
35.for(initialization;boolean;increment)
{
  //statements
}
Eg 
int sum = 0;
for(int i=0; i < 10;i++)
{
   Console.WriteLine("Nat");
}
Console.WriteLine("Finito");

Moreso,for a foreach loop,
foreach(int i in empIds )
{
    Console.WriteLine(i);
}
36.Continue is used to loop out of a condition and restart the for loop. 

Console.WriteLine("Enter A Value");
int max = int.Parse(Console.ReadLine());

for(int i=0; i< max;i++)
{
   if( i ==5)
{
 Console.WriteLine("Finito" + i+ "was found");
 continue;
}
 Console.WriteLine(i);
}
Assuming 10 is entered,
Output is that 0,1,2,3,4,"Finito 5  was found",6,7,8,9

Using break statement,
Console.WriteLine("Enter A Value");
int max = int.Parse(Console.ReadLine());

for(int i=0; i< max;i++)
{
   if( i ==5)
{
 Console.WriteLine("Finito" + i+ "was found");
 break;
}
 Console.WriteLine(i);
}
Assuming 10 is entered,
Output is that 0,1,2,3,4,"Finito 5 was found" after which the for loop does not run again.
37.Methods are for code reusability.
Functions are also called subroutines.
Variable in methods are parameters.
Value in methods are arguments.
Declared within class or struct.
General Structure or Method Signature:
"access modifier" "return type" "Method name"(Parameters)
{
   //Method arguments
} 
Eg 1 public void Nat(int nat)
{
//Statements
}
Eg 2
 public int Nat(int nat,int nathan)
{
 return nat + nathan;
}
Only void has no return types.
Eg:
 public void Display(int nat,int nathan)
{
  int sum = nat + nathan;
  Console.WriteLine(sum);
}

Invoking a method is:
Display(3,52);
38. Example of method is:
int amount = 1234;
int months = 12;

CalculateYearlyWage(amount,months);    //Invoking or Calling the method

static void CalculateYearlyWage(int monthlyWage,int numberOfMonthsWorked)
{
   Console.WriteLine($"Yearly Wage : {monthlyWage *numberOfMonthsWorked}");
}
Another Example of method is:
int amount = 1234;
int months = 12;
int yearlyWage = CalculateYearlyWage(amount,months); 
Console.WriteLine($"Yearly Wage : {yearlyWage}");

static void CalculateYearlyWage(int monthlyWage,int numberOfMonthsWorked)
{
   return  monthlyWage * numberOfMonthsWorked;
}

using AdikaPractice;................This is a namespace.

Calling the correct method from another file involves:
(a)Method name
(b)Parameter Types And Arguments
(c)Number Of Parameters
Method Overloading is where some methods in a class have the same name
but vary by different number of parameters or different names of parameters.
Eg.
public static void DisplaySum(int a,int b)
{
}

public static void DisplaySum(int a,int b,int c)
{
}
Display(3,54)................By this,the first method is invoked.
Another Classical Example Is:
 public  class Utilities
    {
   
       public static int CalculateYearlyWage(int monthlyWage,int numberOfMonthsWorked)
   {
    if(numberOfMonthsWorked == 12)
        return  monthlyWage *  (numberOfMonthsWorked + 1);

    return monthlyWage *  numberOfMonthsWorked;
     }  




     public static int CalculateYearlyWage(int monthlyWage,int numberOfMonthsWorked,int bonus)
   {
    if(numberOfMonthsWorked == 12)
        return  monthlyWage *  (numberOfMonthsWorked + bonus);

    return monthlyWage *  numberOfMonthsWorked + bonus ;
     }        
    }
39.Variable Scope
-Global variable scope
-Local variable  scope

public static double SomeMethod()
{
   double value = 0.4;             //Local Variable hence using it inside another method won't work
                                     Local variables are defined inside a method whilst global are outside a 
                                     method.
  return value;
}
40.Optional Parameters
This is achieved by specifying a default value for one or more parameters.
Eg:
public int AddNumbers(int a,int b,int c= 100)
{
   int sum = a + b + c;
   return sum;
}

AddNumbers(10,29)
AddNumbers(10,29,34)    //This will override the default value of c given above.
41.Named Arguments
Not required to follow order of paramenters.
These work with ":".
public static int AddNumbers(int a,int b)
{

}
AddNumbers(b:10,a:20)
41.Expression-bodied syntax(Lambda Expressions)
public static int CalculateYearlyWage(int age,string name) => Console.WriteLine(age * name);
42.Main Method
The entry point of any app which is implicitly created.
using System;

namespace Console{
  public class Program
{
    static void Main(string[] args)
{
      Console.WriteLine("Hello World");
}
}
}
This is the program.cs of .NET5 whereas that of .NET6 is given as:
  Console.WriteLine("Hello World");
43. "string" keyword.Note that it is in small letter not a capital letter.

string myString = "Nathaniel"

int nat = myString.Length;
 Console.WriteLine(nat);
string upper =  myString.ToUpper();
 Console.WriteLine(upper);
string lower =  myString.ToLower();
 Console.WriteLine(lower);
bool b = myString.Contains("than");
  Console.WriteLine(b);
string sa =  myString.Replace("a","b");
 Console.WriteLine(sa);
This replaces all "a's" in the word with "b".
string sat =  myString.Substring(0,3);
 Console.WriteLine(sat);
Output:Nat
This starts at the  starting point of 0 and takes 3 characters of the string.
String Concatenation
Eg 1:
string s1 = "Nat ";
string s2 = "is cool";
string s3 = s1 + s2;
 Console.WriteLine(s3);
Output : Nat is cool
Eg 2:
Using String.Concat
string s1 = "Nat ";
string s2 = "is cool";
string s3 = String.Concat(s1,s2);
 Console.WriteLine(s3);
Eg 3:
But  two + between the variable name and two " between the strings.
string name = "Nat"
int age = 34;
string greeting = "Hello" + name + " you are" + age + " years ";
Eg 4:
Using string.Format,
string name = "Nat"
int age = 34;
string greeting = string.Format("Hello {0}, you are {1}years", name,age);
 Console.WriteLine(greeting);
Eg 5:
Using string interpolation,
string name = " Nat ";
int age = 34;
string greeting = $"Hello {name}, you are {age} years";
 Console.WriteLine(greeting);
NB: name.Trim().ToLower()...........This removes beginning and ending white spaces.
This is termed method chaining.
44.Escape Characters
\n.........This is a new line
\t........This is a tab like a long space
To represent a file path,
string filepath = "C:\\Documents\\readme.txt";]
A substute is to use verbatim strings say:
string verbatimfilepath = @"C:\Documents\readme.txt";

string namesa = "Nathaniel";
string namesan = "Adika";

string displayName = $"Welcome! \n {namesa} \t {namesan}";
Console.WriteLine(displayName);

string market = "Baking the best \"pie \" ever;
Console.WriteLine(market);
Output is = Baking the best "pie " ever
45.Testing strings for equality,
string firstName = "Nathaniel";
bool b1 = firstName == "Nathan";
Console.WriteLine(b1);
bool b2 = firstName.Equals("Nathan");
Console.WriteLine(b2);
46.Parsing String To Other Types
string w = Console.ReadLine();
double wage = double.Parse(w);
(A)
string enteredText = "true";
if(bool.TryParse(enteredText, out bool b))
{
     Console.WriteLine($"The value is {b});  
}

Console.Write("Enter Wage");
string wage = Console.ReadLine();

int mega = int.Parse(wage);
Console.WriteLine(mega);
(B)
Using TryParse,
Console.Write("Enter The Wage");
string wage = Console.ReadLine();

int wageValue;

if(int.TryParse(wage, out wageValue))
{
  Console.Write("Parsing Success" +wageValue);
}else{
  Console.Write("Parsing Failed");
}
TryParse checks if user will enter an expected type say int otherwise,the else statement
will be used.Hence,the "out" keyword is used to be where the if parsing is succesful,
the value will be stored and exited.
Doing Parsing for dates,
string hireDateString = "12/11/2025";
DateTime hiredDate = DateTime.Parse(hireDateString);
 Console.Write("Parsed Date" +hiredDate);
47.Working With Classes
Classes are used to represent real world models.
48.Custom Types are:
(a)Class................A blueprint of an object.
An object is an instance of a class.
(b)Struct
Eg:
public class MyClass
{
    public int a;
    public string b;


   public void MyMethod()
{
   Console.WriteLine("Nathaniel");
}
}
         CONTENTS OF A CLASS
1.Fields
*Fields are class-level variables as shown in a and b above.
2.Methods
3.Properties........These tend to wrap fields.
4.Events
5.Access Modifiers like 
-public.................This makes a method available to all
-private................The method is only accessible within the class.
-protected...............The method is available to class and it's children via inheritance
public class Employee
{
  public string firstName;
  public int age;

  public void PerformWork()
{

}
}
NB: Both keywords of class and string are in lowercase.
49.Creating Objects(an instance of a class or instantiation) is:
Employee employee = new Employee();
*new keyword is key for creating an object.
*Variable creation to store object is on the left and object creation is on the right.
50.Constructor is a special method for creating objects.
Constructor has no return type and same name as the class.
public class Employee
{
   public string firstName;
   public int age;

  public Employee(strng name,int ageValue)
{
          firstName = name;
          age = ageValue;

}
}
Invoke the constructor by:
Employee employee = new Employee("Nat",35);
A default constructor will always be created without we necessarily creating it.
C# creates the default constructor when we have no constructor defined.
public class Employee
{
    public Employee()
{

}
}
The above is also termed a parameterless constructor.
Via objects,methods and fields can be easily assessed.
Employee employee = new Employee();
employee.PerformWork();
employee.firstName = "Bethany";
int wage = employee.ReceiveWage();
*Constructors can also be overloaded.
*Namespace is a grouping of classes.

*Employee bethany = new Employee("Bethany","Smith","nathanieladikajnr@gmail.com",new DateTime(1979,1,16),25);

*var bethany = new Employee("Bethany","Smith","nathanieladikajnr@gmail.com",new DateTime(1979,1,16),25);
Above is implicit typing shown.
*Classes are termed reference types.
51.Types can be categorised as:
(a)Value Types
(b)Reference Types......Eg is strings
An exapmle of custom type is enumeration and struct.
       VALUE TYPES
*int,double,float,char
*They have a fixed size which is allocated on the stack.
Hence,for:
int a = 1;
int b = 3;
a=1 and b=3 is kept on the stack.

int a = 42;
int aCopy = a;

Console.WriteLine(a);
Console.WriteLine(aCopy);
Both give an output of 42.
Moreso,
aCopy = 100;

Console.WriteLine(a);
Console.WriteLine(aCopy);
a will be 42 and aCopy will be 100.

    REFERENCE TYPES
*These are allocated on the heap.
*Classes and strings are reference types.
object o = new object();
The heap contains a reference to the object "o" and not "o" itself.

Employee testEmployee = bethany;
testEmployee.firstName = "Gill";
testEmployee.DisplayEmployeeDetails();
bethany.DisplayEmployeeDetails();

By this,both testEmployee and bethany have their firstNames changed to Gill.
This happens because both are pointing to the same object on the heap.
52.Passing Parameters Involves:
(a)By Value.............Default we always use
public int AddNumbers(int a,int b)
{
   int sum = a + b;
   return sum;
}

int a = 33;
int b = 44;
AddNumbers(a,b);
*A Copy is made here
*No change of the original copy
(b)By Reference...........this involves using the "ref" keyword
*A reference to the value is passed
*No Copy is made
*There's always a change of the original copy
public int AddNumbers(int a,ref int b)
{
   int sum = a + b;
   return sum;
}

int a = 33;
int b = 44;
AddNumbers(a,ref b);
53.Out Keyword
The value for out must be initialized before leaving the method hence done inside the 
method.
Eg1:
public static int AddNumbers(int a,out int b,out int c)
{
   b= 10;
   int sum = a + b;
   c = sum/10;
   return sum;
}
Eg2:
public int CalculateBonus(int bonus,out int bonusTax)
{
   bonusTax = 0;
   if(numberOfHoursWorked > 10)  
      bonus *=2;
  Console.WriteLine($"The employee bonus Tax is {bonusTax}");

}
54.String is a reference types.
*Strings are immutable in that once you make a change to a string or an edit,
a new string is created on the heap hence original is always changed.
*No Copy is made for example,
1.
string name = "bethany";
string anotherName = name;
name += " smith";
2. string upperCaseName = name.ToUpper();
You'll find out that upperCaseName and name vary.
By this, name becomes bethany smith and anotherName remains bethany
55.Using the string Builder,
string firstName = "Bethany";
string  lastName = "Smith";

StringBuilder builder = new StringBuilder();
builder.Append("Last Name :");
builder.AppendLine(lastName);
builder.Append("First Name :");
builder.AppendLine(firstName);
string result = builder.ToString();

Console.WriteLine(result);
The output is Bethany Smith.
55.Custom Types in C#
(a)Class
(b)Struct
(c)Enumeration
(d)Interface
(e)Delegate
NB: 
*Classes,Interfaces and Delegates are Reference Types.
*Enumeration And Structs are Value Types.
56.Generally,.NET types can be grouped into Value Data Types and Reference Data Types
(A)Value Data Types
*Predefined Types:Integer And Boolean
*User-defined Types:Enumeration And Struct

(B)Reference Data Types
*Predefined Types:String And Array
*User-defined Types:Class And Interface 
Hence,enumeration and struct are user-defined custom types.
57.
*Base Class Library is used when writing C# applications.
*Custom Types in .NET
-Directory
-HttpClient
-Brush
-Exceptions
-DbConnection
-File
-Attachment
-Enumerable
-Icon
-BitMap
-Debug
-DataAdapter
-List<T>
Organzing types in namespaces include:
System:
-System.Web
-System.Collections
-System.Windows
System.IO:
-System.IO.FileSystem
-System.IO.Compression
The "using" keyword is to bring types within a specified namespace.Eg using System.IO
*Global Usings include:
-global using global :: System;
-global using global :: System.IO;
58.JSON is JavaScript Object Notation which is a way or format to transmit data. 
*this is a keyword to point to objects.
59.Enumerations
Eg 1:
enum EmployeeType
{
    Sales,    //0
    Manager,  //1
    Researcher,  //2
    StoreManager,  //3
}
60.Struct is a value type custom data structure.
It contains members and other methods.
Struct is a lightweight class created on the stack and not on the heap like classes are.
struct WorkTask
{
   public string description;
   public int hours;

   public void PerformTask()
{
    Console.WriteLine($"Task {description} of {hours} has been given");
}
}

WorkTask task;
task.description = "Hi Nat";
task.hours = 3;
task.PerformTask();
61.Whilst Classes are reference types,enums and structs are custom types.
62.Classes are organised into namespaces.
namespace Bethany
{
   public Class Employee
{

}
}
63.Notice that for every created class in the project,the namespace is AdikaPractice
that is 
namespace AdikaPractice
{


}
In the program.cs,"using AdikaPractice" is used to call the namespace.
63.Static Keyword
*The method or variable is not instantiated but shared by all objects. 
*Static implies defining an item on the class level and not the object level.
*These items can be used without instantiating an object of the class.
Eg:
public class Employee
{
    public static double bonus = 0.15;
    public static void Increase(double newPercentage)
{
    bonus = newPercentage;
}
To Call the method,
static void Main(string[] args)
{
      Employee.Increase(0.2);       //Called with the className and not necessarily an object
}
}

The generated main method is static.
Once defined on the class level,we can't have 
object_name.double = 0.09; 
To change the value,do className.static variable = 90;
*Static methods work only with static data say:
  double static ban = 0.09;
  public static void Display()
{
   Console.WriteLine(ban);
}
64.WORKING WITH NULL VALUES
Employee employee = new Employee();
employee = null;
//This is the same as not initializing the object.
Nullable types include:
int? a = 10;
int? b = null;
//This will imply the variable a can accept a null value.
double? nathan,string? nathaniel.
When you want to use the nullable variable,
a.Value,b.Value is used.
-double?  hourlyRate = null;
-double? rate = null;
hourlyRate = rate ?? 10;
//This means if the hourlyRate is null,assign a value  of 10.
65.Garbage Collection
Garbage collector runs through memory for objcets to which no reference is pointing to.
Garbage collection cleans up unused objects in memory.
* Guid.NewGuid() creates a unique id.
* employees.Clear();
* employees = null;       //These are target for garbage collection.
66.Class Library involves the Console class from which the Console.ReadLine and 
Console.WriteLine is obtained.
67.Record is a reference type.
*A record can replace a class.
-public record Account;
-public record class Account;
-public record struct Account;
//Positional Records
-public record Account(string AccountNumber);

Account newAccount = new("123-456");
*Records are used when we are passing just data that should not change after creation.
Hence,the advantages are immutability,conciseness and value-based quality.
Eg:
Employee emp1 = new Employee("Bethany");
emp1.firstName = "Gill"   //This will throw an error
*Recall that classes are stored on a heap.
A real world use case of this is for account numbers which are usually rarely changed.
68.Arrays have their setbacks sorted in collections(Lists).
*Arrays are for a fixed number whereas collections allow for flexibility.
*Data Structure to store multiple variables of same type.The elements make use of index.
-int[] allEmployees;
-DateTime[] startDates;
Instatiating an array,
int[] allEmployeeIds = new int[4];
*Arrays are reference types.
*Size is set at creation and cannot be changed.
*To get a user to set the size,
Console.WriteLine("How many employees do you want to register?");
int size = int.Parse(Console.ReadLine());
int[] empId = new int[size];
*int[] empIds = new int[4]{11,44,18,13};
NB:Initializing elements to more than 4 will cause errors.
Attempting to initialize elements of index 7 will generate errors.
*If a length of 4,we'll have 0 to 3.
*A practical use case of arrays is:

Console.WriteLine("How many employee IDs do you want to register?");
int length = int.Parse(Console.ReadLine());
int[] empIds = new int[length];

for(int i=0;i < length; i++)
{
Console.WriteLine("Enter the employee ID");
int id = int.Parse(Console.ReadLine());
empIds[i] = id;
}
Array.Sort(empIds);       //This rearranges the array in ascending order

for(int i=0; i < empIds.length;i++)
{
  Console.WriteLine($"ID{i + 1} : \t{empIds[i]}");

}
69.For each loop,
foreach(Employee e in employees)
{
   e.employeeDetails();
}
70.
foreach(int i in empIds )
{
    Console.WriteLine(i);
}
Methods for arrays:
(a)CopyTo()
(b)Sort()
(c)Reverse()
(d)Length
71.
Using the other methods,
int[] empCopy = new int[length];
empIds.CopyTo(empCopy,0);
Array.Reverse(empCopy);

foreach(int i in empCopy )
{
    Console.WriteLine(i);
}
72.Working with Collections
*Changing size is difficult
*Addition and removal of elements is much easier
Eg:
List<int> empIds = new List<int>();
Notice that size is not defined as size is determined dynamically.
empIds.Add(1);
empIds.Add(2);
empIds.Add(3);

empIds.Remove(1)

foreach(int i in empIds)
{
   Console.WriteLine(i);
}
To Count the number of elements,
int length = empIds.Count; 
Console.WriteLine(length);
To Insert elements at a particular position which begins below is given as ,at index 0 
put 3.
empa.Insert(0,3);
73.Generics is given as List<T>
empa.Clear();.......This is used to clear the array.
74.OOP is basically:
(a)Abstraction.........Low-level Implementation details is hidden
(b)Polymorphism........Multiple forms of a method
(c)Inheritance.........Classes can reuse functionality of other classes
(d)Encapsulation........Containing information inside an object.(Hide internal implementation and data)
*Procedural Programming:Functions And Logic
*OOP:Classes And Objects
*Classes deal with models or entities like Employees
75.Structure Of OOP
-Classes
-Objects
-Methods
-Properties
76.
(A)
*Encapsulation.....Only within a class can the value be changed
*Encapsulation is mainly about private fields,getters and setters.
Eg1:
public class Employee{
    private string firstName;
    private int age;

   public int GetAge(){
       return age;
}

  public int SetAge(int newAge){
       age = newAge;
}

}
Eg2:
  private string firstName;
  private double? hourlyRate;

 public string FirstName{
   get{ return firstName;}
   private set{ firstName = value;}
}

 public double? hourlyRate{
   get{ return hourlyRate;}
   set{ 
if(hourlyRate < 0)
{
   hourlyRate = 0
}
else{
 hourlyRate = value;
}
}
}

*Hence,when you try to access the private field via the object,it is no more possible.
*Rather,
  objectName.MethodNameWithGetter = "Nathan";      //Using the setter
   string name = objectName.MethodNameWithGetter   //Using the getter
*Using a "private set" means that only on the inside can we get the value,on the outside,
it can't be set.
Hence now,
  bethany.FirstName = "Nathan"............This setter will give error
But,
  var name = bethany.FirstName...........The getter works as expected
In the main method,
*When you are "Console.WriteLining",you will return the methodName.
(B)INHERITANCE
-A class gets data and functionality from the parent.
-Deals with parent(base) and derived(child) classes
-Promotes Code Reusuability
public class Employee
{
  public string name;
  public void PerformWork()
{

}
}
public class Manager: Employee
{
    public void DisplayManagerData()
{
    Console.WriteLine(name);
}
}
Access Modifiers: 
*public..............Derived class can access all public members of the base class.
       public class Employee
{
  public string name;
  public void PerformWork()
{

}
}
public class Manager: Employee
{
    public void DisplayManagerData()
{
    Console.WriteLine(name);   //No errors here
}
} 
*Like the working dynamics of "private set",so does the dynamics of "protected set" 
play out.

*private.............Members on the private class are only accessible within the parent class.

{
   private string name;
   public void PerformWork()
{

}
} 

      public class Manager : Employee
{
   
   public void DisplayData()
{
   Console.WriteLine(name);  //This will throw an error because of the private
}
}

*protected..........Accessible within derived classes but if no inheritance,you can't access protected members.
{
   protected string name;
   public void PerformWork()
{

}
} 

      public class Manager : Employee
{
   
   public void DisplayData()
{
   Console.WriteLine(name);  //This will work as expected
}
}
*Inheritance is basically a "IS-A" relation.In essence,a derived type IS-A base type.
*Composition is basically a "HAS-A" relationship.
Eg:
-Employee HAS-A firstName,StreetName and CityName.
77.
*Different Forms
(A)Method Overriding
This is shown by use of virtual and override keywords.
Eg:

public class Employee
{
    public virtual void PerformWork()
{

}
}
To override,
public class Manager : Employee
{
    public override void PerformWork()
{

}
}
If the object is of Employe,the PerformWork() of Employee will be called however
if a Manager object,C# notices that it has it's own implementation of PerformWork()
so that is what is called.
(B)Method Overloading is also Polymorphism where same name but different parameters.
78.Abstraction via Interfaces.
Method Signature with no implementation.
public interface IEmployee
{
   void PerformWork();
   int ReceiveWage();
}
To implement the interface,
public void Manager : IEmployee
{
    void PerformWork(){
.................
}
   int ReceiveWage(){
................
}
}
They cannot be instantiated i.e
IEmployee e1 = new Manager();         //This will work
79.More code written,higher chances of error.
*Debugger is used to test code.
*Unit Test is small piece of logic code to test a large piece.
*Debugging is to find errors in code.
*Using the debugger involves:
(a)Run code in debug mode
(b)Breakpoints in code
(c)Stepping through code line by line
*Writing Unit Tests are not necessary but only make a Dev confident about their code.
80.Sample Unit Test is:
public class EmployeeTests
{
    public void PerfomWork()
{
       //Arrange
       Employee employee = new Employee(...);
       //Act
        Employee.PerformWork();
      //Assert
         Assert.Equal(1,employee.NumberOfHoursWorked);
   
}

}
81.
*Working With Files and Directories is ensured by the System.IO namespace.
Eg:
   -System.IO.Directory
*Create Directory
*Check if directory exist
*Delete directory
   -System.IO.File
*Move(source,destination)
*Copy(source,destination)
*Checks if a file exists.......Exist(path)
*Deletes a file if it exists...Delete(path)
*This reads all contents of a file...............ReadAllText(path)
*This sends a string to a file...................WriteAllText(path,text)
82.Deleting  A File From A Particular Location,
string path = @"C:\Users\ACER\Desktop\CSharpPractice\nat.txt";

if(File.Exists(path))
{
     File.Delete(path);
}

Console.WriteLine("File Deleted!"); 
*!............This denotes negation
*Delimiter is a colon or comma or any symbol that splits a text.
83.FileStream is used for text and binary files.
*Stream is a flow of data from one location to another.
*IS keyword is used to check if objects are of a certain type.
84.Handling Exceptions is a way of preventing an application from crashing 
by catching possible errors.
*This is achieved by the try,catch and finally block.
-Examples of Exceptions
(a)Divide By Zero
try
{
     string input = Console.ReadLine();
     int a = int.Parse(input);
}catch(DivideByZeroException ex)
{
       Console.WriteLine("Cannot Divide Ny Zero"); 
       
}
(b)File Not Accessible
(c)Incorrect Permissions
(d)Database Unreachable
(e)IndexOutOfRange Exception

try
{
     string input = Console.ReadLine();
     int a = int.Parse(input);
}catch(FormatException ex)
{
       Console.WriteLine("Enter an integer number"); 
       throw;
}

85.Console.ForegroundColor = ConsoleColor.Green;.......This makes the console color that green as specified
Inspecting Exception Details:
try
{
     string input = Console.ReadLine();
     int a = int.Parse(input);
}catch(FormatException ex)
{
       Console.WriteLine(ex.Message);         //This shows the error
       Console.WriteLine(ex.StackTrace);      //This shows where error occurs 
}
There can be multiple catch blocks at once where C# will check for which applies.
try
{
     string input = Console.ReadLine();
     int a = int.Parse(input);
}catch(FormatException ex)
{
       Console.WriteLine(ex.Message);         //This shows the error
       Console.WriteLine(ex.StackTrace);      //This shows where error occurs 
}catch(DivideByZeroException ex)
{
       Console.WriteLine("Cannot Divide Ny Zero"); 
       
}
*Finally block executes all code in there whether all went fine or not.
try
{
     string input = Console.ReadLine();
     int a = int.Parse(input);
}catch(FormatException ex)
{
       Console.WriteLine(ex.Message);         //This shows the error
       Console.WriteLine(ex.StackTrace);      //This shows where error occurs 
}finally{
   //Code that always executes
}

Console.ResetColor();.............This sets the color to the default of white
86.
NEXT STEPS:+
-Object Oriented System
-Databases
(ADO.NET or Entity Framework Core/EF Core)  are used in C#
-LINQ.........Language Integrated Query
-Async Coding
*Used when working with file access and external API access.
*This uses async/await pattern
FOR APPLICATION DEVELOPMENT,
1.Desktop Applications:Frameworks for building modern UI for windows.
-WinForms Development/WPF(Windows Presentation Foundation)
2.Web Development
-ASP.NET Core 
Eg MVC and Razor Pages(Server-side tecnologies to create pages to render pages on server using C# code) and 
Blazor(used to write C# to execute in the browser) are used for modern UIs.
3. APIs
ASP.NET Core can be used.
4.Mobile App Development(for IOS and Android)
-Xamarin
-Maui


















