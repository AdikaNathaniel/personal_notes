        GITHUB BASICS
1.Merge and Rebase take changes on a feature branch to be added to a main branch.
2.Rebase takes changes on a feature branch and puts them on top of a master branch.
This ensures less complications when working with others on a team.
        COMMANDS
1.git pull origin main
2.git checkout -b newb
3.git add .
4.git commit -m "News"
*As I am working with newb branch,other developers may be working on the main branch.
*Moving back to the main,
5.git checkout main
6.git pull origin main
*This ensures that I have all changes made to the main branch by other developers
as I worked on the newb branch.
7.git checkout newb
8.git rebase main...............This implies take all on main and add to the newb branch
9.git checkout main
10.git rebase newb............Do this as a finaliser to close the rebase.
11.git push origin main
More Often than not,we delete the other branch created and not the default branch,
hence:
*git branch -d newb.............This deletes newb locally but you must be on master for this to happen.
*git push origin --delete newb
         EXPLANATIONS  OF MERGER
*Git Squash......................This puts all commits into one commit and adds to 
a main branch.
*Git merge.............This ties commits of a feature branch with that of a main branch.
*Git rebase.............This takes commits of a feature branch to the tip of a 
main branch.
--Every team has their own preferences.
--The advantage of rebase is that commit  code history is flat
and readable. 
             DIFFERENCE
--Git merge keeps all commits even for clarity whereas git rebase takes off
duplicate commits.(git rebase gives a cleaner commit history)
--Git merge has several lines of workflow wherease git rebase has a single line
of workflow.
*The similarity is that it is a medium to combine two branches.

**philomatics.com/git-workshop.............Trials for Git

                          GIT COMMANDS
1.git log -2..............This gives history of last 2 commits
2. -git checkout newb
   -git merge master.........This adds newb to master branch
   -git push origin master
*Don't do a git push before doing a git rebase.
*Only push after doing a rebase.
3.git branch -a...........This shows all remote branches we're working on.
4.git status..............This shows deleted or modified files
5.git add fileA...............This takes a file from a local machine to staging area
6.git diff fileA..............This depicts in A the newly modified parts.
Hence,once you make changes to a file,do a git diff to see that section 
in green and previously unmodified file in red.
*Commit message must be veru descriptive.
*Version Control can be seen in release of software updates.
7.git branch nat
8.git checkout nat
9.git push --set-upstream origin nat..............This is to send a locally created branch
to a remote repository.
                         TYPES OF BRANCHES
1.Long Running Branches
This is the main branch all members of the team are working on.
2.Short-lived Branches
This is a feature branch for a specific purpose after which it is deleted.
They are merged or rebased into long running branches.
                       PULL REQUESTS
*Pull Requests are way to communicate about code and ask for a review.
*After a PR is created,reviewer can accept and merge into the main 
branch.
*Pull requests is also a way to contribute to an open-source project.
*Fork is a personal copy of an open-source project to contribute to it.
Hence,
(a)Do a fork using the fork button
(b)Do a git clone to get a copy
*A scenario of merge conflict occuring is when the same line of code is changed
by different Devs and committed to the main branch.
*git status will show a merge conflict.
To undo a merge conflict,
*git merge --abort
*git rebase --abort
Remember to always do a rebase before a git push to avoid merge
conflicts.
*Colleague or Senior Devs "peer review" a pull request.
                     LONG TUTORIAL NOTES
1.Version Control is also called source control.(even in VSCode)
2.DevOps is a set of practices,philosophies and tools that increase ability of a
team to deliver high quality applicationsat a quick velocity.
3.git blame is a way of identifying which engineer wrote a line of code so one
can easily reach out to them for further explanation.
4.Aside Git,other version control systems are mercurial,subversion,perforce and
AWS Code Commit.
5.Major types are
(a)Centralized Version Control System........Central Server
(b)Distributed Version Control System........Every user is a server of the source code
6.Version Control works with Continuous Integration,Continuous Delivery and Continuous
Deployment.
                    CLI COMMANDS
1.touch adika.txt.....................This creates a new file called 'adika.txt'
2.mkdir adika.........................This creates a new folder called 'adika'
3.history.............................This is a command that gives a history of
all commands run in the CLI.
4.code hey.txt.........................This opens 'hey.txt' in vscode
5.Unix came before Linux
6.ls...................................This shows all sub folders in a particular folder
7.pwd...................................This shows the current working directory(prints 
the working directory)
8.mv naj adika..........................Move the naj folder into adika folder
9.cat nat.txt...........................This displays the contents of nat.txt
10.wc nat.txt  -w.......................This counts the words in nat.txt
Any folder with "." beginning it is a hidden folder.Hence,".git" is a hidden folder.
                      GIT WORKFLOW
1.Modified
2.Staged.............This takes a file from local machine to staging area.This is to
track a file.
3.Committed..........A savepoint
Always do a git pull to get latest changes on a remote repository.
                      GIT COMMANDS
1.git clone "https:url"
2.git checkout -b feature/lesson..........This creates a branch and switches to it
SETTING UP REMOTE CONNECTION TO A LOCAL BRANCH,
3.git remote add origin "git@github....."
4.git log --pretty=oneline..................This shows all commits by writing them
in one line.
5.git blame "filename"..................................This shows the date and time a commit
is made.
*Commit ID
*Author
*Date
*Time
*Line Number
*Content of change
These are features that can be obtained from a git blame.
6.git blame -L 5,15 nathan.txt..............................This gives the above
information between lines 5 and 15.
7.git log -p "commit-id".......................This gives info on that file
*Commit messages must be in present tense.
                                  UNDO A COMMIT
1.git log.........................This is to get the commit hash you want
2.git revert <commit-hash>
3.git push origin main
                    GIT RECAP
1.Git is a distributd version control system
2.In previous times,the default name of a branch is master but now the default is main
3.In a git log,the most recent commit appears on top.
4.Head is a pointer to the latest commit created.
5.Comparing Git to GitHub,git is a tool to track changes whereas GitHub is a cloud 
platform.
6.Types of repository are local and remote repository.
Aside GitHub,there's GitLab and BitBucket.
7.Name default branch as main to connect it to the remote repo.
8.The branch you push from is the one that will be seen on your remore repository.
9.The format is always git add,git commit and git push.
10.Commit messages must be in the present tense say "Add a new book".
Let it answer to: "This commit will .............."
11.git push --set-upstream origin "branch_name"...........This does a push of that
local branch to the remote repo.
   OR 
git push -u origin "branch_name"...............This also works
After these,you can manually do git push.
12.From "Compare and Pull Request",you can choose branch to merge to(on far left)
13.Merge Conflict is a situation that occurs when two developers edit the same line
of code.
14.Git revert is used when you want the commit history to be in git log but
you want to go back to previous commit.
It is the opposite of reset because whilset reset takes commit out of history,
git revert undoes changes but keeps a history of that commit.
15.git stash is to temporarily save an uncommited changes whether staged or unstaged.
On doing a git stash,the code you're working on leaves.
16.The git reset,git revert and git stash are termed the advanced git.
17. Use .gitignore  to untrack build files and dependencies.
18. Use Consistent Branch Naming Conventions like feature/user-authentication.
19.Use Lowercase Letters and Hyphens for naming branches Eg feature/new-ui-design.
20. Be Descriptive, but Concise Eg feature/user-profile-page
21. Avoid Long Branch Names Eg   hotfix/critical-bug-in-header-footer.
22.Use Team-Specific Prefixes Eg  backend/feature/api-endpoint 





                    GIT COMMANDS
1.git config  --global init.defaultBranch nathan..................This command creates the default branch from 
main to nathan
2.git checkout <commit-hash>.............This takes the head to a previous file committed.
3.git checkout -f nat
   OR 
  git checkout nat.................These are to switch from one branch to another
4.git branch -M main...............This creates a default branch as main to be linked
to the remote repository.
5.git remote add origin "https:...."
6.git branch "branch_name"..........This creates a new branch
7.git checkout "branch_name"........This does a switch to that branch
8.git checkout -b "names"............This creates a branch and switches to it.
9.git branch "new_branch" "source_branch".......This creates a new branch which inherits
all properties of the source branch.Hence,all commits on the source branch are on the
new branch.
10.git pull...........This ensures the remote repository is same as that of the local repositoty.
      OR
git pull origin main
These are usually termed the advanced:
11.git reset "commit-hash"............This takes a commit off the staging area hence
one has to add and commt again.
A git status will show that the particular file has been modified.
12.git revert <commit-hash>
git revert --continbue.................This is used when you have somewhat of errors in committing.
12.qa! OR q....................This is a form of exit
13.(a)git stash
   (b)git stash list\...........This gives a stash name such as "stash@{0}:
   (c)git stash apply stash@{0}
   

                                              AGILE METHODOLOGY
*Agile is iterative and incremental
*Agile is not a methodology but a philosophy.
It is a set of principles and values that enable a team be as flexible as possible.
It is an iterative and incremental approach.
Agile was introduced in 2001.
1.Business Unit give the user stories or requirements.The software team is the agile team who work 
with stakeholders and product managers.
2.Sprint refers to short periods of time.
3.Continuous Integration is deployed to ensure all parts of code fit together.
4.Continous Delivery allows one to deliver code in each sprint till development of software is complete.
5.Agile methodology deploy standup meetings.
6.Other methodology is Waterfall where steps are one after the other.This is the vice versa of Agile.
7.Various Agile Implemenations(frameworks/methodoligies):
(a)Scrum..............This divides an entire project into small manageable tasks called user stories which are completed in sprints(iterations).
The Scrum master facilitates the teams progress.This is deployed at Hubtel.
This involves:
(i)Plan
(ii)Build
(iii)Test
(iv)Review
Agile involves Sprint Planning,Daily Scrum(standup) and Sprint Review(quaterly meetings).
(b)Kanban.........This uses a Kanban board that track the progress of tasks via backlog(To Do),tasks to Do(In Progress) and Done(Completed) tasks.
Whereas Scrum has fixed sprints,Kanban is alot more flexible.
(c)Extreme Programming(XP).......This involves  test-driven development,pair programming and Continuous Integration.
StandUps are intended to be very short.
(d)Crystal..............This methodology focuses on user interactions rather than processes and tools.
(e)Lean................An agile methodlogy where processes inhibiting quick delivery of products is quickly removed.
*Version Updates deploy Agile Methodology.
*This is feedback dependent
                        AGILE PRINCIPLES(MANIFESTO)
1.Customer Satisfaction
2.Welcome Changes
3.Deliver Frequently
4.Work Together
5.Motivated Teams
6.Face To Face Interactions
7.Working Software
8.Constant Pace
9.Good Design
10.Simplicity(new member should be able to fit in)
11.Self-organized teams with different skills to complement each other.
12.Reflect and Adjust
                                 AGILE VALUES
1.People over processes and tools
2.Working Software Over Comprehensive Documentation
3.Customer Collaboration Over Written Contracts
4.Responding to Change rather than plan
                       PEOPLE IN AGILE METHODOLOGY
1.Product Owner..........This is the client
2.Scrum Master............One who facilitates the team(product owner,develper and tester) to follow agile principles and values
3.Tester
4.Cross-functional team of testers and developers
User Stories............A small set of requirements defined by a client
Acceptance Test..........A match of task to user story
Acceptance Criteria........Features defined for which a user story can be considered as Done.
                     MAJOR QUESTION FOR STANDUP MEETINGS
1.What did I do yesterday?
2.What will I do today?
3.Any challenges?
This helps to check if every team member is on track or not.
*Product Owner,Scrum master and Cross-functional team.
*Release Planning refers to a plan on how updated features will be given out(released) to users.
*Product Backlog is a list of requirements or things to be done.
*Product Backlog consists of numerous user stories.
ABC of Agile(Key Terminology of Agile)
(a)Acceptance...........This deals with whether client accepts product
(b)Backlog Grooming.......This involves breaking user stories down on the backlog.
(c)Capacity................The amount of work a team can do within a sprint.
(d)Task....................Unit of work to complete user stories
*A disadvantage of agile is that teams are small hence the members must be very 
knowledgeable.
*Scrum Master is same as Team Lead.
*Agile is usually restricted to 3 to 9 in a team.
          PHASES
1.Requirements Gathering
2.Planning
3.Design
4.Implementation 
5.Testing And Deployment
6.Release And Evaluation
                 AGILE METRICS
1.Sprint Burndown...............This is used to measure the amount of done during a sprint.
Parameters involved are time and work done.
2.Velocity.......................The average amount of work done by a team in a sprint.
3.Cycle Time......................This is a measure of the amount of time that a team
member spends on a task to complete it.    
           TERMS
*Jira is a project management tool usually used in Agile.
*Agile is Developer,QA(Testing) and Customer.  
*Epic is a collection of user stories
*Product owner is part of the scrum team and not same as the client.Product Owner does the interaction with the customer.
*There's a term as Sprint Planning Meeting...........This is a meeting to which the team decides the user stories to be settled in each sprint.
*Sprint Backlog........................This is a list of user stories for each sprint.
*Standup is also called scrum meeting/call.
*Sprint Retrospective meeting.........This meeting is conducted once at the end of each sprint.
This is a consideration of the good and bad in each sprint.
*Story Point..............This is a rough estimation of user stories given by dev and QA in the form of fibonacci series.
*Burndown Chart..........This shows amount of work remaining on the sprint which is controlled by scrum master.
                                       SUMMARY
(1)ROLES
(a)Product Owner
(b)Scrum master
(c)Team

(2)ARTIFACTS
(a)Product Backlog............Contains all user stories
(b)Sprint Backlog.............Contains stories for that sprint
(c)Burndown Chart

(3)CEREMONIES
(a)Sprint Planning
(b)Stanup
(c)Sprint Review
                                  SOLID PRINCIPLES
Solid Principles ensure software is testable and maintainable.
Since SOLID can be broken into other acronyms,it is termed an macronym.
SOLID is applied after you've written the code and intend to refactor it.
TDD...........Test Driven Development
DDD...........Domain Driven Development
1.S...........Single Responsibility Principle
2.O...........Open Closed Principle
3.L...........Liskov Substitution Principle
4.I...........Interface Segregation Principle
5.D...........Dependency Inversion Principle
                          1.SINGE RESPONSIBILITY PRINCIPLE
A class or function should have one and only one reason to change.
Single Responsibility principle does not go with tight coupling(two details bound together such that it is difficult to change) but rather loose coupling.

*This implies all classes must have a singular responsibility.This increases the amount of reusuability.
Eg.
1.
public class Task{
      public void downloadFile(String location);
      public void parseTheFile(File file);
      public void persistTheData(Data data);
}
This violates Single Responsibility Principle because,the Task class is doing multiple things.
2.
public class Salary
{
    public double perDayRate { get; set; }
  
    public int numberOfDays { get; set; }

    public double CalculateSalary()
   {
          return this.perDayRate * this.numberOfDays;
   }

   public double PrintSalary()
    {
          Console.WriteLine(this.perDayRate * this.numberOfDays);
    }

}
To solve this according to Single Responsibility Principle,
public class Salary
{
    public double perDayRate { get; set; }
  
    public int numberOfDays { get; set; }

    public double CalculateSalary()
   {
          return this.perDayRate * this.numberOfDays;
   }
}

public class PrintSalary
{
     public void PrintSalary(double salary)
     {
        Console.WriteLine(salary);
     }

}
In the main class,
class Program
{
   static void Main(string[] args)
    {
        CalculateSalary s = new CalculateSalary { numberOfDays = 20, perDayRate = 1000 };
        var salary = s.CalculateSalary();
        PrintSalary p = new PrintSalary();
        p.PrintSalary(salary);
        Console.ReadKey(true);

   }

}

                         2.OPEN CLOSED PRINCIPLE
Software entities should be open for extension but closed for modification.
The three approaches to achiveing this include:
(a)Parameters
public class DoOneThing
{
    public void Execute(string message)
   {
            Console.WriteLine(message)                    //By this the class is not fixed but flexible as it allows to accept other stuff for message.
   }
}
(b)Inheritance
public class DoOneThing
{
    public virtual void Execute()
   {
            Console.WriteLine("Hello World");                   //By this the class is not fixed but flexible as it allows to accept other stuff for message.
   }
}

public class DoAnotherThing
{
    public override void Execute()
   {
            Console.WriteLine("Hey World");         //By use of the virtual keyword,this gives room for override that method hence no fixed outputs.
}
}
(c)Composition/Injection
public class DoOneThing
{
     private readonly MessageService _messageService;
     private DoOneThing(MessageService messageDervice) => _messageService = messageService;
    public virtual void Execute()
   {
            Console.WriteLine(_messageService.GetMessage());                   //By this the class is not fixed but flexible as it allows to accept other stuff for message.
   }
}
A real life case study is packages and libraries where they are only extended and not modified.
   A violation example is :
public class DiscountCalculator
{
     double discountValue;

     public double CalculateDiscount(int amount,string rule)
{
          if(rule.Equals("summer"))
    {
        discountValue = amount * 0.15;
    }
      else  if(rule.Equals("winter"))
    {
        discountValue = amount * 0.10;
    }
     else  if(rule.Equals("christmas"))
    {
        discountValue = amount * 0.30;
    }
      return discountValue;

}
}
Writing A Unit Test,
using Microsodt.VisualStudio.TestTools.UnitTesting;

  class DiscountCalculatorShouldReturn 
   {
          public void TestSetUp()
   {
    discountCalculator = new DiscountCalculator();

  }
   public void FifteenPercentForSummer()
{
     var result = _discountCalculator.CalculateDiscount(100,"summer");
     Assert.AreEqual(15.0,result);
}

  public void TenPercentForWinter()
{
     var result = _discountCalculator.CalculateDiscount(100,"winter");
     Assert.AreEqual(10.0,result);
}


    }
By modifying the class,the unit test must also be modified hence Open Closed Principle will be violted.
To solve this,we'll use an interface.
public class  DiscountCalculator
{
   double discountValue;
   piblic List<IDiscountCalculate> _discountService;

   public DiscountCalculator()
{
    _discountService = new List<IDiscountCalculate>();
    _discountService.Add(new SummerDiscountCalculator());
    _discountService.Add(new WinterDiscountCalculator());

}

public double CalculateDiscount(int amount,string rule)
{
    discountValue =  _discountService.Find(i => i.Rule(rule)).Calculate(amount);
    return  discountValue;
}


}
public interface IDiscountCalculate
{
   bool Rule(string RuleName);

  double Calculate(int Amount);

}

public class SummerDiscountCalculator : IDiscountCalculate
{
  public bool Rule(string RuleName)
{
   return "summer".Equals(RuleName);
}
public double Calculate(int Amount)
{
  return  Amount * 0.15;
}
}

public class WinterDiscountCalculator : IDiscountCalculate
{
  public bool Rule(string RuleName)
{
   return "winter".Equals(RuleName);
}
public double Calculate(int Amount)
{
  return  Amount * 0.10;
}
}
By this,if you want to add a new property we add a class hence doing an extension and not modifying the original concrete class.
For example,
public class IDayDiscountCalculator : IDiscountCalculate
{
  public bool Rule(string RuleName)
{
   return "IDAY".Equals(RuleName);
}
public double Calculate(int Amount)
{
  return  Amount * 0.05;
}
}

                         3.LISKOV SUBSTITUTION PRINCIPLE
Subtypes must be substitutable for their base types.
*Use inheritance only when superclass is replacable by a sub class.
     DETECTING VIOLATIONS IN CODE
1.Type Checking with IS or AS in polymorphic code
  foreach(var employee in employees)
{
    if(employeee is Manager)
{
    Helpers.PrintManager(employee as Manager);   //This even breaks the OpenClosed principle.
    break;
}
    Helpers.PrintEmployee(employee);
}

Correction:
  foreach(var employee in employees)
{
    employee.Print();
}
2.Null Checks

  foreach(var employee in employees)
{
    if(employeee == null)
{
   Console.WriteLine("Employee not found");   //This even breaks the OpenClosed principle.
    break;
}
    Helpers.PrintEmployee(employee);
}
3.NotImplementedException
public interface INotificationService
{
   void SendText(string SmsNumber,string message);
   void SendEmail(string to,string from,string subject,string body);
}

public class SmsNotificationService : INotificationService
{
    public void SendText(string SmsNumber,string message){
   throw new NotImplementedException();
}
   void SendEmail(string to,string from,string subject,string body){

   //Code to send Email
}
}
Example 2:
   public class Rectangle
{
  public virtual int Height { get; set;}
  
  public virtual int Width { get; set;}

}
public class Square : Rectangle
{
    private int _height;
    private int _width;

public override int Height
{
    get
{
   return _height;
}
   set
{
    _width = value;
    _height = value;
}


public override int Width
{
    get
{
   return _width;
}
   set
{
    _width = value;
    _height = value;
}
}

}
}

public abstract class Shape
{
    
}

public class AreaCalculator
{
    public static int CalculateArea(Rectangle r)
{
     return r.Height * r.Width;
}

    public static int CalculateArea(Square s)
{
     return r.Height * r.Height;
}
}
Writing the Unit Tests,
public class TestAreaShouldReturn
{
public void Sixfor2*3Rectangle()
{
     var myRectangle = new Rectangle { Height = 2; Width = 3;};
     var result = AreaCalculator.CalculateArea(myRectangle);
     Assert.AreEqual(6,result);

}

public void Ninefor3*3Square()
{
     var mySquare = new Square { Height = 3};
     var result = AreaCalculator.CalculateArea(mySquare);
     Assert.AreEqual(9,result);

}

public void TwentyFourfor4*6RectangleFromSquare()
{
      Rectangle newRectangle = new Square();
      newRectangle.Height = 4;
      newRectangle.Width = 6;
      var result = AreaCalculator.CalculateArea(newRectangle);
      Assert.AreEqual(24,result);

}

}
                         4.INTERFACE SEGREGATION PRINCIPLE
The dependency of one class to another should depend on the smallest possible interface.
*Keep interfaces as small as possible because if you've got alot of methods in an inteface,then once you add another method in an 
interface,then all implementing classes must change.
*Client is the code interacting with an instance of the interface.
In other words,
Classes should not be forced to use methods they'll not need.
         DETECTING   INTERFACE SEGREGATION VIOLATION
1.Large Interfaces
2.NotImplemtedException
3.Client code that uses a small subser of a large interface.
-ISP is related to LSP in that large interfaces will be difficult to use as child classes to replace base classes.
-ISP is related to SRP in that large interfaces will most likely have numerous responsibllity.
Hence,ISP is directly related to SRP and LSP.

public interface nat(){
   public void IFly();

   public void IDrive();

}

public class car : nat
{
    public void IFly(){
    Console.WriteLine("Does a car fly?");
}

    public void IDrive(){
    Console.WriteLine("Does a car drive?");
}
}
To solve using ISP,

public interface nat(){
   public void IFly();
}

public interface nati(){
   public void IDrive();
}

public class car : nati{
 
    public void IDrive(){
    Console.WriteLine("Does a car drive?");
}
}
By this,only required interfaces are used.

                         5.DEPENDENCY INVERSION PRINCIPLE
Depend upon interfaces not upon concrete classes.
A high level class should not depend on a low-level class.
Low-level dependencies include:
(a)Database
(b)File System
(c)Email
(d)Web APIs 
(e)Configuration setup
(f)Clock

These five principles are associated with Object Oriented Programming.
*Abstraction deal with interfaces and abstract classes.
Hence,high-level classes should depend on abstractions.

Recap at Infragistics(YouTube Channel on Solid)   

              OBJECT-ORIENTED PROGRAMMING
TYPES:
(A)Single Inheritance................The normal base and derived class
(B)Multi-level Inheritance...........One class inheriting from another in levels
(C)Hierarchical Inheritance.........All derived classes inheriting from one base class like a King
(D)Multiple Inheritance............One derived class inheriting from multiple base classes.
                      




 